// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package cfdl

import (
	"context"
	"github.com/aws/aws-sdk-go-v2/service/cloudformation"
	"sync"
)

// Ensure, that DeployInterfaceMock does implement DeployInterface.
// If this is not the case, regenerate this file with moq.
var _ DeployInterface = &DeployInterfaceMock{}

// DeployInterfaceMock is a mock implementation of DeployInterface.
//
//     func TestSomethingThatUsesDeployInterface(t *testing.T) {
//
//         // make and configure a mocked DeployInterface
//         mockedDeployInterface := &DeployInterfaceMock{
//             CreateChangeSetFunc: func(ctx context.Context, params *cloudformation.CreateChangeSetInput, optFns ...func(*cloudformation.Options)) (*cloudformation.CreateChangeSetOutput, error) {
// 	               panic("mock out the CreateChangeSet method")
//             },
//             CreateStackFunc: func(ctx context.Context, params *cloudformation.CreateStackInput, optFns ...func(*cloudformation.Options)) (*cloudformation.CreateStackOutput, error) {
// 	               panic("mock out the CreateStack method")
//             },
//             DeleteStackFunc: func(ctx context.Context, params *cloudformation.DeleteStackInput, optFns ...func(*cloudformation.Options)) (*cloudformation.DeleteStackOutput, error) {
// 	               panic("mock out the DeleteStack method")
//             },
//             DescribeStackEventsFunc: func(ctx context.Context, params *cloudformation.DescribeStackEventsInput, optFns ...func(*cloudformation.Options)) (*cloudformation.DescribeStackEventsOutput, error) {
// 	               panic("mock out the DescribeStackEvents method")
//             },
//             ExecuteChangeSetFunc: func(ctx context.Context, params *cloudformation.ExecuteChangeSetInput, optF ...func(*cloudformation.Options)) (*cloudformation.ExecuteChangeSetOutput, error) {
// 	               panic("mock out the ExecuteChangeSet method")
//             },
//             UpdateStackFunc: func(ctx context.Context, params *cloudformation.UpdateStackInput, optFns ...func(*cloudformation.Options)) (*cloudformation.UpdateStackOutput, error) {
// 	               panic("mock out the UpdateStack method")
//             },
//         }
//
//         // use mockedDeployInterface in code that requires DeployInterface
//         // and then make assertions.
//
//     }
type DeployInterfaceMock struct {
	// CreateChangeSetFunc mocks the CreateChangeSet method.
	CreateChangeSetFunc func(ctx context.Context, params *cloudformation.CreateChangeSetInput, optFns ...func(*cloudformation.Options)) (*cloudformation.CreateChangeSetOutput, error)

	// CreateStackFunc mocks the CreateStack method.
	CreateStackFunc func(ctx context.Context, params *cloudformation.CreateStackInput, optFns ...func(*cloudformation.Options)) (*cloudformation.CreateStackOutput, error)

	// DeleteStackFunc mocks the DeleteStack method.
	DeleteStackFunc func(ctx context.Context, params *cloudformation.DeleteStackInput, optFns ...func(*cloudformation.Options)) (*cloudformation.DeleteStackOutput, error)

	// DescribeStackEventsFunc mocks the DescribeStackEvents method.
	DescribeStackEventsFunc func(ctx context.Context, params *cloudformation.DescribeStackEventsInput, optFns ...func(*cloudformation.Options)) (*cloudformation.DescribeStackEventsOutput, error)

	// ExecuteChangeSetFunc mocks the ExecuteChangeSet method.
	ExecuteChangeSetFunc func(ctx context.Context, params *cloudformation.ExecuteChangeSetInput, optF ...func(*cloudformation.Options)) (*cloudformation.ExecuteChangeSetOutput, error)

	// UpdateStackFunc mocks the UpdateStack method.
	UpdateStackFunc func(ctx context.Context, params *cloudformation.UpdateStackInput, optFns ...func(*cloudformation.Options)) (*cloudformation.UpdateStackOutput, error)

	// calls tracks calls to the methods.
	calls struct {
		// CreateChangeSet holds details about calls to the CreateChangeSet method.
		CreateChangeSet []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *cloudformation.CreateChangeSetInput
			// OptFns is the optFns argument value.
			OptFns []func(*cloudformation.Options)
		}
		// CreateStack holds details about calls to the CreateStack method.
		CreateStack []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *cloudformation.CreateStackInput
			// OptFns is the optFns argument value.
			OptFns []func(*cloudformation.Options)
		}
		// DeleteStack holds details about calls to the DeleteStack method.
		DeleteStack []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *cloudformation.DeleteStackInput
			// OptFns is the optFns argument value.
			OptFns []func(*cloudformation.Options)
		}
		// DescribeStackEvents holds details about calls to the DescribeStackEvents method.
		DescribeStackEvents []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *cloudformation.DescribeStackEventsInput
			// OptFns is the optFns argument value.
			OptFns []func(*cloudformation.Options)
		}
		// ExecuteChangeSet holds details about calls to the ExecuteChangeSet method.
		ExecuteChangeSet []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *cloudformation.ExecuteChangeSetInput
			// OptF is the optF argument value.
			OptF []func(*cloudformation.Options)
		}
		// UpdateStack holds details about calls to the UpdateStack method.
		UpdateStack []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *cloudformation.UpdateStackInput
			// OptFns is the optFns argument value.
			OptFns []func(*cloudformation.Options)
		}
	}
	lockCreateChangeSet     sync.RWMutex
	lockCreateStack         sync.RWMutex
	lockDeleteStack         sync.RWMutex
	lockDescribeStackEvents sync.RWMutex
	lockExecuteChangeSet    sync.RWMutex
	lockUpdateStack         sync.RWMutex
}

// CreateChangeSet calls CreateChangeSetFunc.
func (mock *DeployInterfaceMock) CreateChangeSet(ctx context.Context, params *cloudformation.CreateChangeSetInput, optFns ...func(*cloudformation.Options)) (*cloudformation.CreateChangeSetOutput, error) {
	if mock.CreateChangeSetFunc == nil {
		panic("DeployInterfaceMock.CreateChangeSetFunc: method is nil but DeployInterface.CreateChangeSet was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *cloudformation.CreateChangeSetInput
		OptFns []func(*cloudformation.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockCreateChangeSet.Lock()
	mock.calls.CreateChangeSet = append(mock.calls.CreateChangeSet, callInfo)
	mock.lockCreateChangeSet.Unlock()
	return mock.CreateChangeSetFunc(ctx, params, optFns...)
}

// CreateChangeSetCalls gets all the calls that were made to CreateChangeSet.
// Check the length with:
//     len(mockedDeployInterface.CreateChangeSetCalls())
func (mock *DeployInterfaceMock) CreateChangeSetCalls() []struct {
	Ctx    context.Context
	Params *cloudformation.CreateChangeSetInput
	OptFns []func(*cloudformation.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *cloudformation.CreateChangeSetInput
		OptFns []func(*cloudformation.Options)
	}
	mock.lockCreateChangeSet.RLock()
	calls = mock.calls.CreateChangeSet
	mock.lockCreateChangeSet.RUnlock()
	return calls
}

// CreateStack calls CreateStackFunc.
func (mock *DeployInterfaceMock) CreateStack(ctx context.Context, params *cloudformation.CreateStackInput, optFns ...func(*cloudformation.Options)) (*cloudformation.CreateStackOutput, error) {
	if mock.CreateStackFunc == nil {
		panic("DeployInterfaceMock.CreateStackFunc: method is nil but DeployInterface.CreateStack was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *cloudformation.CreateStackInput
		OptFns []func(*cloudformation.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockCreateStack.Lock()
	mock.calls.CreateStack = append(mock.calls.CreateStack, callInfo)
	mock.lockCreateStack.Unlock()
	return mock.CreateStackFunc(ctx, params, optFns...)
}

// CreateStackCalls gets all the calls that were made to CreateStack.
// Check the length with:
//     len(mockedDeployInterface.CreateStackCalls())
func (mock *DeployInterfaceMock) CreateStackCalls() []struct {
	Ctx    context.Context
	Params *cloudformation.CreateStackInput
	OptFns []func(*cloudformation.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *cloudformation.CreateStackInput
		OptFns []func(*cloudformation.Options)
	}
	mock.lockCreateStack.RLock()
	calls = mock.calls.CreateStack
	mock.lockCreateStack.RUnlock()
	return calls
}

// DeleteStack calls DeleteStackFunc.
func (mock *DeployInterfaceMock) DeleteStack(ctx context.Context, params *cloudformation.DeleteStackInput, optFns ...func(*cloudformation.Options)) (*cloudformation.DeleteStackOutput, error) {
	if mock.DeleteStackFunc == nil {
		panic("DeployInterfaceMock.DeleteStackFunc: method is nil but DeployInterface.DeleteStack was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *cloudformation.DeleteStackInput
		OptFns []func(*cloudformation.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockDeleteStack.Lock()
	mock.calls.DeleteStack = append(mock.calls.DeleteStack, callInfo)
	mock.lockDeleteStack.Unlock()
	return mock.DeleteStackFunc(ctx, params, optFns...)
}

// DeleteStackCalls gets all the calls that were made to DeleteStack.
// Check the length with:
//     len(mockedDeployInterface.DeleteStackCalls())
func (mock *DeployInterfaceMock) DeleteStackCalls() []struct {
	Ctx    context.Context
	Params *cloudformation.DeleteStackInput
	OptFns []func(*cloudformation.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *cloudformation.DeleteStackInput
		OptFns []func(*cloudformation.Options)
	}
	mock.lockDeleteStack.RLock()
	calls = mock.calls.DeleteStack
	mock.lockDeleteStack.RUnlock()
	return calls
}

// DescribeStackEvents calls DescribeStackEventsFunc.
func (mock *DeployInterfaceMock) DescribeStackEvents(ctx context.Context, params *cloudformation.DescribeStackEventsInput, optFns ...func(*cloudformation.Options)) (*cloudformation.DescribeStackEventsOutput, error) {
	if mock.DescribeStackEventsFunc == nil {
		panic("DeployInterfaceMock.DescribeStackEventsFunc: method is nil but DeployInterface.DescribeStackEvents was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *cloudformation.DescribeStackEventsInput
		OptFns []func(*cloudformation.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockDescribeStackEvents.Lock()
	mock.calls.DescribeStackEvents = append(mock.calls.DescribeStackEvents, callInfo)
	mock.lockDescribeStackEvents.Unlock()
	return mock.DescribeStackEventsFunc(ctx, params, optFns...)
}

// DescribeStackEventsCalls gets all the calls that were made to DescribeStackEvents.
// Check the length with:
//     len(mockedDeployInterface.DescribeStackEventsCalls())
func (mock *DeployInterfaceMock) DescribeStackEventsCalls() []struct {
	Ctx    context.Context
	Params *cloudformation.DescribeStackEventsInput
	OptFns []func(*cloudformation.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *cloudformation.DescribeStackEventsInput
		OptFns []func(*cloudformation.Options)
	}
	mock.lockDescribeStackEvents.RLock()
	calls = mock.calls.DescribeStackEvents
	mock.lockDescribeStackEvents.RUnlock()
	return calls
}

// ExecuteChangeSet calls ExecuteChangeSetFunc.
func (mock *DeployInterfaceMock) ExecuteChangeSet(ctx context.Context, params *cloudformation.ExecuteChangeSetInput, optF ...func(*cloudformation.Options)) (*cloudformation.ExecuteChangeSetOutput, error) {
	if mock.ExecuteChangeSetFunc == nil {
		panic("DeployInterfaceMock.ExecuteChangeSetFunc: method is nil but DeployInterface.ExecuteChangeSet was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *cloudformation.ExecuteChangeSetInput
		OptF   []func(*cloudformation.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptF:   optF,
	}
	mock.lockExecuteChangeSet.Lock()
	mock.calls.ExecuteChangeSet = append(mock.calls.ExecuteChangeSet, callInfo)
	mock.lockExecuteChangeSet.Unlock()
	return mock.ExecuteChangeSetFunc(ctx, params, optF...)
}

// ExecuteChangeSetCalls gets all the calls that were made to ExecuteChangeSet.
// Check the length with:
//     len(mockedDeployInterface.ExecuteChangeSetCalls())
func (mock *DeployInterfaceMock) ExecuteChangeSetCalls() []struct {
	Ctx    context.Context
	Params *cloudformation.ExecuteChangeSetInput
	OptF   []func(*cloudformation.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *cloudformation.ExecuteChangeSetInput
		OptF   []func(*cloudformation.Options)
	}
	mock.lockExecuteChangeSet.RLock()
	calls = mock.calls.ExecuteChangeSet
	mock.lockExecuteChangeSet.RUnlock()
	return calls
}

// UpdateStack calls UpdateStackFunc.
func (mock *DeployInterfaceMock) UpdateStack(ctx context.Context, params *cloudformation.UpdateStackInput, optFns ...func(*cloudformation.Options)) (*cloudformation.UpdateStackOutput, error) {
	if mock.UpdateStackFunc == nil {
		panic("DeployInterfaceMock.UpdateStackFunc: method is nil but DeployInterface.UpdateStack was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *cloudformation.UpdateStackInput
		OptFns []func(*cloudformation.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockUpdateStack.Lock()
	mock.calls.UpdateStack = append(mock.calls.UpdateStack, callInfo)
	mock.lockUpdateStack.Unlock()
	return mock.UpdateStackFunc(ctx, params, optFns...)
}

// UpdateStackCalls gets all the calls that were made to UpdateStack.
// Check the length with:
//     len(mockedDeployInterface.UpdateStackCalls())
func (mock *DeployInterfaceMock) UpdateStackCalls() []struct {
	Ctx    context.Context
	Params *cloudformation.UpdateStackInput
	OptFns []func(*cloudformation.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *cloudformation.UpdateStackInput
		OptFns []func(*cloudformation.Options)
	}
	mock.lockUpdateStack.RLock()
	calls = mock.calls.UpdateStack
	mock.lockUpdateStack.RUnlock()
	return calls
}
